(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{581:function(t,s,a){"use strict";a.r(s);var n=a(12),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("之前在群里一直有粉丝对我做的3d文字感兴趣，今天它来了，我是如何去做的。本篇文章可能不会讲太多代码层面的东西，主要是一个技术方案从选型到最终实现中的遇到的一些问题。 主要是结合自己项目做的一些思考。希望能对你有所帮助，或者是开阔眼界。")]),t._v(" "),a("h1",{attrs:{id:"three-js如何去展示中文字体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#three-js如何去展示中文字体"}},[t._v("#")]),t._v(" three.js如何去展示中文字体")]),t._v(" "),a("p",[t._v("首先"),a("strong",[t._v("three.js")]),t._v("原生有个"),a("strong",[t._v("textGeometry")]),t._v(", 原生是支持的，但是你如果想支持各种中文字体，首先你需要一个下载字体的ttf文件。然后你就去一个网站叫做，  http://gero3.github.io/facetype.js/ 。 你把你的"),a("strong",[t._v("ttf")]),t._v("文件上传，然后将这些字体转成"),a("strong",[t._v("json")]),t._v(", 再用three.js 自带的"),a("strong",[t._v("fontLoader")]),t._v(" 去解析这个json, 配合"),a("strong",[t._v("textGeometry")]),t._v(" 你就可以实现了。我这里做了一个简单的实现：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" loader "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("THREE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FontLoader")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nloader"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("load")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'../json/alibaba.json'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("font")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" geometry "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("THREE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("TextGeometry")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'我爱掘金'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    font"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" font"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    size"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    height"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    curveSegments"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    bevelEnabled"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    bevelThickness"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    bevelSize"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    bevelOffset"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    bevelSegments"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" material "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("THREE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MeshBasicMaterial")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" color"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x50ff22")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" mesh "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("THREE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Mesh")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("geometry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" material"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("scene"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mesh"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("给大家看下gif效果图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ztifly.oss-cn-hangzhou.aliyuncs.com/3d%E6%96%87%E5%AD%97%E5%AD%97%E4%BD%93%E5%8A%A0%E8%BD%BD.gif",alt:"3d文字字体加载"}})]),t._v(" "),a("p",[t._v("其实不同的字体，对应不同的加载"),a("strong",[t._v("json")]),t._v(",至于字体加粗，其实就是看字体有没有加粗的类型，如果有加粗的类型， 你就去展示就好了，其实还是不同的"),a("strong",[t._v("json")]),t._v(", 我们这次的3D文字其实是没有采用这个"),a("strong",[t._v("three")]),t._v(" 这一套的。")]),t._v(" "),a("h1",{attrs:{id:"_3d文字技术选型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3d文字技术选型"}},[t._v("#")]),t._v(" 3d文字技术选型")]),t._v(" "),a("p",[t._v("首先第一点不满足的就是我们的造型， 我们是做家居的，我们不光有3D视图展示，还有2D视图展示，所以就是一套数据分别在"),a("strong",[t._v("3D")]),t._v("和"),a("strong",[t._v("2D")]),t._v("都有对应的表达。看下面两张图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ztifly.oss-cn-hangzhou.aliyuncs.com/image-20210827153024644.png",alt:"3D视图"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ztifly.oss-cn-hangzhou.aliyuncs.com/image-20210827153104509.png",alt:"2D视图"}})]),t._v(" "),a("p",[t._v("对吧，所以这是我当时去做技术评估不去考虑的最重要问题， 我们2D所有的数据都是用"),a("strong",[t._v("SVG")]),t._v("去展示。所以说当时第一时间思考🤔，有没有一个库是可以支持解析字体文件转成"),a("strong",[t._v("svg")]),t._v("的，功夫不负有心人哇，终于找到去"),a("strong",[t._v("npm")]),t._v("找到了一个叫opentype.js 我们看下这个库的介绍：")]),t._v(" "),a("blockquote",[a("p",[t._v("opentype.js is a JavaScript parser and writer for TrueType and OpenType fonts.")]),t._v(" "),a("p",[t._v("It gives you access to the "),a("strong",[t._v("letterforms")]),t._v(" of text from the browser or Node.js. See https://opentype.js.org/ for a live demo.")])]),t._v(" "),a("p",[t._v("其实他的特性总结下来有下面：")]),t._v(" "),a("ol",[a("li",[t._v("非常高效")]),t._v(" "),a("li",[t._v("支持跑在浏览器和nodejs 中")])]),t._v(" "),a("p",[t._v("其实当时我找到了很多社区方案， 有一个叫"),a("strong",[t._v("text-to-svg")]),t._v("这个库， 看名字好像很满足我们的要求， 但是本着学习的本质，我只喜欢看源码，看看他到底用了啥，结果发现他是基于上面"),a("strong",[t._v("opentype.js")]),t._v(" 这个库去做了封装，那我肯定不用它了。 我只需要字体被转换出来的"),a("strong",[t._v("svg")]),t._v("信息，其实选用opentype.js 这个库还有两个原因哈**，第一支持ts ,第二的话他的周下载量是十分高的，至少说明他是稳定的。**")]),t._v(" "),a("h2",{attrs:{id:"_2d"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2d"}},[t._v("#")]),t._v(" 2d")]),t._v(" "),a("p",[t._v("有了"),a("strong",[t._v("opentype.js")]),t._v("的加成，我们可以把输入的文字变成了转成"),a("strong",[t._v("svg")]),t._v("的信息，这里主要用的一个api就是loadFont，然后就可以根据我们输入的文字，然后生成对应的"),a("strong",[t._v("svg")]),t._v("， 我下面写一些伪代码：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" font "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" opentype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("load")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https://backend-public-asset-alpha.oss-cn-shanghai.aliyuncs.com/resources/website/font/11c302dd8c50619e4131da5d645fb422.otf'")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" map "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("text")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 防止重复添加")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" parseFont "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" font"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPath")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("150")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("72")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" char "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'999'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("has")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("char"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        map"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" parseFont"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("commands"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" map\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("然后输入任何文字会产生，一些"),a("strong",[t._v("SVG")]),t._v("path 信息。我们看下"),a("strong",[t._v("2")]),t._v(" 这个"),a("strong",[t._v("svg")]),t._v("path信息。然后你可以看下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ztifly.oss-cn-hangzhou.aliyuncs.com/image-20210827191917983.png",alt:"信息"}})]),t._v(" "),a("p",[t._v("M其实对应的就是画布移动， L 就是画直线， C就是三阶贝塞尔曲线， Z 就是闭合path。 svg的path 信息有了， 这里第一个难点出来了")]),t._v(" "),a("h2",{attrs:{id:"贝塞尔曲线的离散"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#贝塞尔曲线的离散"}},[t._v("#")]),t._v(" 贝塞尔曲线的离散")]),t._v(" "),a("p",[t._v("因为我们2d 可以用贝塞尔曲线去表达，但是我们3D的dataModel 中是没有这个数据去表示的，所以说什么呢，我得想好一个替代方案， 这里其实就设计到一个离散， 就是我将贝塞尔曲线，离散成多个点， 然后用直线去表达。这里不清楚的话，可以看我之前的一篇文章， 我里面对贝塞尔曲线做了详情讲解：  "),a("a",{attrs:{href:"https://juejin.cn/post/6973583813179867172",target:"_blank",rel:"noopener noreferrer"}},[t._v("面试官问我会canvas? 我可以绘制一个烟花🎇动画"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("所以我将这些数组信息，去都转成2d点，去存储， 然后到这里很多人以为结束了，然后把这些2D线段去转成3D线段，你以为这样就结束了？")]),t._v(" "),a("h2",{attrs:{id:"单一文字分组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单一文字分组"}},[t._v("#")]),t._v(" 单一文字分组")]),t._v(" "),a("p",[t._v("我也以为事情就这么简单，直到我打了个 "),a("strong",[t._v("e")]),t._v("，才发现事情并没有辣么简单。我们看下他的"),a("strong",[t._v("svg")]),t._v("信息。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ztifly.oss-cn-hangzhou.aliyuncs.com/image-20210827193753795.png",alt:"复杂信息"}})]),t._v(" "),a("p",[t._v("好家伙不仔细一看，原来有两个闭合路径，为什么会有这样呢？ 我这里给大家画个图 就知道了。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ztifly.oss-cn-hangzhou.aliyuncs.com/image-20210827194115104.png",alt:"e字母"}})]),t._v(" "),a("p",[t._v("蓝色的其实对应的是"),a("strong",[t._v("第一个path")]),t._v(" 我们称作"),a("strong",[t._v("Outer")]),t._v(", 红色其实对应的是内部。然后我就自然而然去思考了， 我去对数组进行分类。 主要是根据闭合曲线的"),a("strong",[t._v("Z")]),t._v(" 去分组， 也就是一个字分成多个数据。")]),t._v(" "),a("h2",{attrs:{id:"射线检测法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#射线检测法"}},[t._v("#")]),t._v(" 射线检测法")]),t._v(" "),a("p",[t._v("这里的话很多人以为结束了，但是其实并没有。这里涉及到射线检测法。 算出一个文字每一个对应的"),a("strong",[t._v("order")]),t._v(" ,大概是由【true, false..】组成的数组。 false 表示逆时针， true表示 顺时针。  射线检测法的目的， 其实去判断这个path 和其他path 有没有交点， 交点为奇数其实就是逆时针， 为偶数其实就是顺时针。")]),t._v(" "),a("p",[a("strong",[t._v("射线检测法")]),t._v("： 其实就是取每个path 的第一个点在X轴方向上发出射线，然后算出与其他path 的交点个数，这里我不细讲了， 感兴趣的可以看我这篇文章  "),a("a",{attrs:{href:"https://juejin.cn/post/6996811170459942925",target:"_blank",rel:"noopener noreferrer"}},[t._v("canvas 实现事件系统"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("至于为什么要去判断顺序， 与我们用的算法库"),a("strong",[t._v("clipper")]),t._v(" 有关系。有外轮廓和内轮廓之分， 内轮廓我们一般叫做洞也就是"),a("strong",[t._v("hole")]),t._v("， 为了让大家有简单的概念， 我还是画图去表示：我就以"),a("strong",[t._v("回")]),t._v("这个字举例子：")]),t._v(" "),a("p",[t._v("首先回这个字是也就是有两个path,  第二个path 肯定是内轮廓 也就是顺序肯定是【false,true】")]),t._v(" "),a("p",[t._v("我们先看下正确✅的图形：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ztifly.oss-cn-hangzhou.aliyuncs.com/image-20210827230712907.png",alt:"正确"}})]),t._v(" "),a("p",[t._v("注意方向：外轮廓是"),a("strong",[t._v("逆时针")]),t._v("， 内轮廓是"),a("strong",[t._v("顺时针")])]),t._v(" "),a("p",[t._v("看下都是顺序是【true,true】的图形是这样的：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ztifly.oss-cn-hangzhou.aliyuncs.com/image-20210827230522928.png",alt:"错误图形"}})]),t._v(" "),a("p",[t._v("顺序错误会导致，区域都会填充。 所以为什么要有顺序了相信你也就明白了。  看下一个复杂的字吧感受下中国文字的博大精深。圗 和国")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ztifly.oss-cn-hangzhou.aliyuncs.com/image-20210827231256246.png",alt:"show"}})]),t._v(" "),a("h2",{attrs:{id:"生成几何体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生成几何体"}},[t._v("#")]),t._v(" 生成几何体")]),t._v(" "),a("p",[t._v("我们现在其实只是一个平面图形，文字肯定是个立方体， 这里 其实主要是生成顶面和侧面， 顶面的话其实就是通过底面上的点， 在底面的法向量延长一定距离。侧面的话，其实还是底面的点和顶面对应的点连起来的一条直线， 然后形成侧面。 我还是画图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ztifly.oss-cn-hangzhou.aliyuncs.com/image-20210827233455266.png",alt:"几何体"}})]),t._v(" "),a("p",[t._v("每一个侧面大概是这样的一个过程。虚线就是对应点的连线，然后形成侧面。这个过程看着十分简单，其实在去写的时候还是十分复杂的。")]),t._v(" "),a("h1",{attrs:{id:"交互层的思考🤔"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#交互层的思考🤔"}},[t._v("#")]),t._v(" 交互层的思考🤔")]),t._v(" "),a("p",[t._v("交互层面的思考主要是三维空间中矩阵的应用。我们主要讲下这几点：")]),t._v(" "),a("ol",[a("li",[t._v("2d 坐标转换到3d坐标")]),t._v(" "),a("li",[t._v("垂直、水平、偏移、缩放")]),t._v(" "),a("li",[t._v("吸附")])]),t._v(" "),a("h2",{attrs:{id:"_2d-3d"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2d-3d"}},[t._v("#")]),t._v(" 2d——3d")]),t._v(" "),a("p",[t._v("这里的话是这样的生成的"),a("strong",[t._v("svg")]),t._v(" 信息比如说他的开始点， 并不是在原点，但是我转到3d的世界坐标系，肯定默认是在原点的。所以的话，这里算出输入的字体的所有2d的信息，都要做一个"),a("strong",[t._v("偏移Matrix")]),t._v(",因为在画布中移动，也就是文字跟着鼠标的点移动， 鼠标在哪里然后文字就在那里。这时候的"),a("strong",[t._v("移动Matrix")]),t._v(" 是相对世界原点的。所以这一层转换是非常重要的，而且还有一个"),a("strong",[t._v("非常值得注意的点")]),t._v("是： svg 和canvas 的坐标系是在左上角的，也就是转到3d下来Y轴是要取反。 我还是画图表示下哈：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ztifly.oss-cn-hangzhou.aliyuncs.com/image-20210828090323403.png",alt:"2d-3d"}})]),t._v(" "),a("h2",{attrs:{id:"垂直、水平、偏移、缩放"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#垂直、水平、偏移、缩放"}},[t._v("#")]),t._v(" 垂直、水平、偏移、缩放")]),t._v(" "),a("p",[t._v("其实是这样的， 当你输入一行字默认是水平的，但是有需求我想把他搞成垂直的。 这里就是对应的就是在X轴偏移和 Y轴偏移的问题。 openType 默认是 可以批量解析字体的，但是呢我们不采用， 我还是一个个文字去处理，做到可控制。问题来了，每一个文字之间的间距， 怎么确保他们不相交呢？ 其实这里又涉及到计算每一个文字的"),a("strong",[t._v("boundingBox")]),t._v("， 算出boundingBox之后呢，然后做一个距离叠加， 类似于reduce。因为输入的字有很多越往后面， 距离越大呗。 缩放的话，其实是这样的，根据现有字体的大小  除上 基础字体大小  比如是20  算出一个scale， scale 可以算出缩放矩阵。物体字体大小变大， 然后✖️ 缩放矩阵。 那么"),a("strong",[t._v("bounding box")]),t._v(" 自然也变化了。 整个一流程就是这样的：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ztifly.oss-cn-hangzhou.aliyuncs.com/image-20210828093258549.png",alt:"变化"}})]),t._v(" "),a("p",[t._v("虚线框可以想象成每个矩形的bouding, 就是每个字， 每个字变化了， 矩形变化，想在 X轴 就在X轴，想在Y轴 就在Y轴。")]),t._v(" "),a("h2",{attrs:{id:"吸附"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#吸附"}},[t._v("#")]),t._v(" 吸附")]),t._v(" "),a("p",[t._v("吸附这东西其实没有啥悬乎的东西：")]),t._v(" "),a("ol",[a("li",[t._v("面对照相机📷")]),t._v(" "),a("li",[t._v("算旋转矩阵")])]),t._v(" "),a("p",[t._v("总结下来就这两个东西。 这里因为文字默认加载到的是相对于 世界坐标系的原点的， 比如你想吸附三维空间中的任意平面。 所以说你可以基于这个平面建立一个局部坐标系，其实本质上就是"),a("strong",[t._v("世界坐标系 —— 局部坐标系")]),t._v("的转换， 吸附到任意平面本质上，你可以只可以获得一个平面的法向量， 至少2个轴去确定一个局部坐标系， 这里默认选取X轴的正方向， 这样。这里 用到了three.js 的一个方法叫做"),a("strong",[t._v("lookat")]),t._v(", 其实也就是模拟相机去算出这个矩阵。")]),t._v(" "),a("p",[t._v("参数就是个vector")]),t._v(" "),a("blockquote",[a("p",[t._v("vector - 一个表示世界空间中位置的向量。")]),t._v(" "),a("p",[t._v("也可以使用世界空间中x、y和z的位置分量。")]),t._v(" "),a("p",[t._v("旋转物体使其在世界空间中面朝一个点。")])]),t._v(" "),a("p",[t._v("由于还要让文字始终面对照相机📷 ，所以要计算照相机的方向 和平面的法向量去做点乘，来判断其他轴是否反向。大概就是这样：")]),t._v(" "),a("p",[t._v("我们看下gif：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://ztifly.oss-cn-hangzhou.aliyuncs.com/%E5%90%B8%E9%99%84.gif",alt:"吸附"}})]),t._v(" "),a("h1",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("本期的分享到此结束，如果你举得我哪里有写的不对的地方，欢迎评论区交流指正，如果想试玩的话， 可以百度搜索🔍红星设计云，https://www.mshejiyun.com/  里面有很多好玩的工具。我是喜欢图形的Fly,我们下次再见👋拉， 如果有收获，别忘了点赞收藏加关注。")]),t._v(" "),a("blockquote",[a("p",[t._v("关注我的公众号 "),a("strong",[t._v("前端图形")]),t._v("，获取更多好玩与有趣的图形知识。"),a("strong",[t._v("如果你也一样对技术热爱，喜欢图形和数据可视化📚并且为之着迷,欢迎加我个人微信（wzf582344150），将会邀请你加入我们的可视化交流学习群一起面向快乐编程~")]),t._v(" 🦄。\n我是Fly，在这个互联网技术疯狂快速迭代的时代中,很高兴能和你一起变强！😉")])])])}),[],!1,null,null,null);s.default=r.exports}}]);