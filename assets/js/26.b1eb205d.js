(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{577:function(t,a,s){"use strict";s.r(a);var v=s(12),_=Object(v.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("因为群里粉丝一直要求我写一篇"),s("strong",[t._v("可视化入门指南")]),t._v("，今天他来了。其实说起前端可视化，大家所能想到的就是各种图表，大屏。这种看着贼炫酷，而笔者呢工作也一直从事3D前端开发工作，慢慢对图形产生了兴趣。但是呢一直做的是三维的东西，没搞过二维的。大概是2月前开始学习2D的一些东西，然后并写了一些文章，效果还不错。所以我就写一些经验之谈，大佬勿喷。 我大概从4个方面去讲我是怎么学习的")]),t._v(" "),s("ol",[s("li",[s("p",[s("strong",[t._v("可视化不得不掌握的数学基础")])])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("svg")]),t._v("方面的学习")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("canvas")]),t._v("方面的学习")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("可视化中")]),t._v("不得不掌握的"),s("strong",[t._v("图形算法")])])])]),t._v(" "),s("p",[t._v("读完本篇文章，你可以大概知道我该怎么去学，需要学什么？以及我推荐的一些学习资料和学习资源！")]),t._v(" "),s("h1",{attrs:{id:"数学篇"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数学篇"}},[t._v("#")]),t._v(" 数学篇")]),t._v(" "),s("p",[t._v("提起数学很多程序员头疼哇，我写代码还要学可恶的数学，但是我很明确的告诉你——"),s("strong",[t._v("很重要")]),t._v("，如果你想学可可视化的话，数学很重要，背后的几何意义更重要。读者一开始理解不深，导致很多东西理解不了，吃了很多亏哇！")]),t._v(" "),s("h2",{attrs:{id:"向量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#向量"}},[t._v("#")]),t._v(" 向量")]),t._v(" "),s("p",[t._v("在二维空间或者三维空间中， 是不是都有点的概念，只不过一个是二维的一个是三维的， 假设，现在这个平面直角坐标系上有一个向量 v。向量 v 有两个含义：一是可以表示该坐标系下位于 (x, y) 处的一个点；二是可以表示从原点 (0,0) 到坐标 (x,y) 的一根线段。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://ztifly.oss-cn-hangzhou.aliyuncs.com/image-20210807104916309.png",alt:"向量"}})]),t._v(" "),s("p",[t._v("我在写canvas的同时就喜欢用一个Point2d 类就是这个原理， canvas本身就是坐标系。画布上的点都可以用向量表示， 原点在左上方。")]),t._v(" "),s("h2",{attrs:{id:"向量加减法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#向量加减法"}},[t._v("#")]),t._v(" 向量加减法")]),t._v(" "),s("p",[t._v("一个向量可以用其他两个向量去表示，也可以用两个向量去做减法，我说个实际工作中经常用到的例子： 如何让一个点在某一个方向延展多少长度呢？")]),t._v(" "),s("p",[t._v("这里其实就是用到了向量的加法， "),s("strong",[t._v("首先这个方向肯定是是个单位向量")]),t._v(" ， 为什么是单位向量呢？？ 因为向量是有"),s("strong",[t._v("大小")]),t._v("和方向的， 而"),s("strong",[t._v("单位向量 只有方向， 长度 为1")]),t._v(" ，然后我们只要开始点 加上 这个方向向量 ✖️  长度。就可以得到了。 背后不就是向量加法的运用。 我还是画图给大家展示下吧。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://ztifly.oss-cn-hangzhou.aliyuncs.com/image-20210807111254940.png",alt:"向量加法"}})]),t._v(" "),s("p",[t._v("如图：我要从A-B点   方向是od 然后你可以乘以任何长度 得到 OD 然后相加， 是不是就可以得到B点了。 一图胜千言！，减法大家可以自己去思考，同样的道理的")]),t._v(" "),s("h2",{attrs:{id:"向量的叉乘和点乘"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#向量的叉乘和点乘"}},[t._v("#")]),t._v(" 向量的叉乘和点乘")]),t._v(" "),s("p",[t._v("其实很多种实践，这里我就举一个例子哈，带你了解点乘。其实还有投影")]),t._v(" "),s("p",[t._v("向量点乘可以用来判断 连个向量是否同一方向， 我还是画图给大家讲解， 不说太多理论，都是实战中经常用到的。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://ztifly.oss-cn-hangzhou.aliyuncs.com/image-20210807112941817.png",alt:"叉乘"}})]),t._v(" "),s("p",[t._v("A向量和B向量之间的夹角是锐角 所以是同向 ， B向量和C量之间的夹角是钝角所以是反向 ，因为点乘的数学公式就是两个向量的模长 ×  cosθ 。")]),t._v(" "),s("h2",{attrs:{id:"叉乘"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#叉乘"}},[t._v("#")]),t._v(" 叉乘")]),t._v(" "),s("p",[t._v("叉乘的几何意义也是非常重要的，可以算多边形的面积， 计算出另一个向量 垂直于这两个向量。 还是开始画图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://ztifly.oss-cn-hangzhou.aliyuncs.com/image-20210807114458835.png",alt:"垂直"}})]),t._v(" "),s("p",[t._v("X向量 和 Y向量去做叉乘 得到的 向量Z 是 xy 平面的"),s("strong",[t._v("normal")]),t._v("。")]),t._v(" "),s("p",[t._v("算面积：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://ztifly.oss-cn-hangzhou.aliyuncs.com/image-20210807115228924.png",alt:"面积"}})]),t._v(" "),s("p",[t._v("叉乘的数学意义： A向量的模长 ×  B向量的模长 × sinθ    不就是平行四边形的高 H  所以可以用来算面积。")]),t._v(" "),s("h2",{attrs:{id:"叉乘还可以用来判断三个点的方向"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#叉乘还可以用来判断三个点的方向"}},[t._v("#")]),t._v(" 叉乘还可以用来判断三个点的方向")]),t._v(" "),s("p",[t._v("Corss 的几何叉积得到的是一个数值，  只要判断当前数值是大于0 小于 0就好了， 就知道这个三个点的方式是逆时针 还是顺时针就好了。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://ztifly.oss-cn-hangzhou.aliyuncs.com/image-20210807123431570.png",alt:"顺时针还是逆时针"}})]),t._v(" "),s("p",[t._v("图中可以看到 OAB  和OA1B 的方向是不同，OA向量✖️ OB向量 的值 和 OA1 ✖️OB向量 算出的来的值 是相反的。公式我给大家列举下：")]),t._v(" "),s("blockquote",[s("p",[t._v("a.x * b.y - a.y * b.x")])]),t._v(" "),s("p",[t._v("其实向量的点乘 和叉乘非常的重要，大家一定要要好理解，后面的图形算法，很多也是基于这个去实现的。")]),t._v(" "),s("h1",{attrs:{id:"矩阵"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#矩阵"}},[t._v("#")]),t._v(" 矩阵")]),t._v(" "),s("p",[t._v("空间中图形的大部分变化都是可以通过矩阵去表示的，大概有下面几种类型：")]),t._v(" "),s("ol",[s("li",[t._v("平移矩阵")]),t._v(" "),s("li",[t._v("旋转矩阵")]),t._v(" "),s("li",[t._v("缩放矩阵")]),t._v(" "),s("li",[t._v("镜像矩阵")]),t._v(" "),s("li",[t._v("错切矩阵")]),t._v(" "),s("li",[t._v("投影矩阵")])]),t._v(" "),s("p",[t._v("这里我给大家推荐的学习资源是B站的：")]),t._v(" "),s("p",[t._v("https://www.bilibili.com/video/BV1ib411t7YR?from=search&seid=15308763710996235630")]),t._v(" "),s("p",[t._v("线性代数的本质，看完你就能够明白了，包括上面的向量之间的变化。")]),t._v(" "),s("p",[t._v("镜像矩阵我推荐你看我这篇文章， 我是求导了三维空间中任意平面的镜像矩阵的了，")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzkyMjI2MDg3OQ==&mid=2247483690&idx=1&sn=37ec913d9fceb16ad80f856b12d0e7e5&chksm=c1f645caf681ccdc631d628dec8932fe5836878dffcb668b0e82f3e5d6e2d7e2635f99f8de28&token=1380653203&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"}},[t._v("求空间任意平面的镜像矩阵"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("我这里给大家简单的讲解下最简单的变化—— "),s("strong",[t._v("平移矩阵")])]),t._v(" "),s("p",[t._v("还是看下图吧:")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://ztifly.oss-cn-hangzhou.aliyuncs.com/image-20210807195209291.png",alt:"平移矩阵"}})]),t._v(" "),s("p",[t._v("在这样的三维坐标系中从A点平移到B点  x变化了 2 y变化了0 z 变化了 2  对应矩阵的写法是什么呢：\n$$\n\\begin{bmatrix}\n1&0&0&2\\\n0&1&0&0\\\n0&0&1&2\\\n0&0&0&1\\\n\\end{bmatrix}\n×\n\\begin{bmatrix}\n2\\\n0\\\n4\\\n1\\\n\\end{bmatrix}")]),t._v(" "),s("p",[t._v("=")]),t._v(" "),s("p",[t._v("\\begin{bmatrix}\n4\\\n0\\\n6\\\n1\\\n\\end{bmatrix}\n$$")]),t._v(" "),s("p",[t._v("其实矩阵中每一行都有对应的矩阵， 平移矩阵一般改变的第四列的前三个数字")]),t._v(" "),s("h2",{attrs:{id:"曲线"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#曲线"}},[t._v("#")]),t._v(" 曲线")]),t._v(" "),s("p",[t._v("无论是2d还是3d都需要曲线的表达，最简单的圆弧、椭圆弧、然后连续曲线可以用贝塞尔曲线去表达，还有B样条曲线，nurbs曲线。掌握曲线最终的还是数学哇。")]),t._v(" "),s("p",[t._v("圆的方程： x ^2  + y ^ 2 = r ^ 2")]),t._v(" "),s("p",[t._v("椭圆的方程：  x ^ 2 /  a ^ 2 +  y ^ 2 / b ^ 2  = 1")]),t._v(" "),s("p",[t._v("n阶贝塞尔曲线的方程： 𝐵(𝑡)=∑𝑖=0𝑛𝑃𝑖(1−𝑡)𝑛−𝑖𝑡𝑖,𝑡𝜖[0,1]")]),t._v(" "),s("p",[t._v("b样条曲线和nurbs曲线我还没接触过，但是我们组的小伙伴正在做自由曲面，可能涉及到了。这里我只是简单表示了直线方程，有了方程你可以你去进行高度模拟，比如我在做3D文字的时候，我们底层算法库还没有支持贝塞尔， 不过没关系我们不是有方程嘛， 可以通过方程将贝塞尔曲线离散成多个点，然后用直线去表达。因为我们人眼去看屏幕上的东西，离散的很多的话，肉眼是完全看不出来的。 我这里给大家看一张图吧：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://ztifly.oss-cn-hangzhou.aliyuncs.com/image-20210807203738469.png",alt:"弧线"}})]),t._v(" "),s("p",[t._v("圗这个部分的弧线我就是用我贝塞尔曲线 离散成直线去表达的， 还有国中的点其实也是贝塞尔曲线离散成直线去做的。从视觉上来看是能够近似模拟的。3D文字中的 更多技术，我后面会专门写一篇文章去详细介绍， 顺便自己去梳理下。如果你感兴趣，那你可得关注我，不然就找不到我了。")]),t._v(" "),s("h2",{attrs:{id:"坐标系的转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#坐标系的转换"}},[t._v("#")]),t._v(" 坐标系的转换")]),t._v(" "),s("p",[t._v("为什么要有这个东西呢，canvas和svg的坐标系都是左上方是原点，这一点你不觉得有点反人类？ 好不舒服，我在画折线图的时候就发现了，从原点向上，坐标轴是递减的。其实这个问题怎么解决呢，其实很简单就是我们进行坐标系的转换，我将原先画布的原点， 通过变化到左下角， 这样我们在计算点的坐标的时候，就没有心智负担了，该怎样就是怎样。 说完2d我再和你聊聊3D， 就拿Three.js 举例子吧有个局部坐标系，观察坐标系（相机）、 世界坐标系、裁剪坐标系、屏幕坐标系。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://ztifly.oss-cn-hangzhou.aliyuncs.com/image-20210807215633362.png",alt:""}})]),t._v(" "),s("p",[t._v("这是空间中某个物体到最终屏幕所做的一系列操作。")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("首先物体的自身有个坐标系我们叫做局部坐标系，他也有个原点，但是他在世界坐标系下也有对应的位置，所以他们之间有一个矩阵变化——"),s("strong",[t._v("模型矩阵")])])]),t._v(" "),s("li",[s("p",[t._v("世界坐标系——到观察坐标系也有矩阵变化， 这叫"),s("strong",[t._v("视图矩阵")])])]),t._v(" "),s("li",[s("p",[t._v("观察空间——裁剪空间   叫做 "),s("strong",[t._v("投影矩阵")]),t._v("因为3维空间的东西我们是用相机去模拟人眼，在视椎体内的东西才能被看到。所有就有了投影矩阵， 有透视投影和正交投影， 一个近大远小，一个远近都是一样的")])]),t._v(" "),s("li",[s("p",[t._v("标准设备坐标-屏幕坐标。 这里就涉及到坐标系的原点的问题。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://ztifly.oss-cn-hangzhou.aliyuncs.com/image-20210807223718469.png",alt:"坐标系"}})])])]),t._v(" "),s("p",[t._v("归一化的坐标是相对于画布中心的， 但是canvas默认的坐标系是左上角的。 我们分析下坐标系的变化，首先Y轴是相反的所以 第一个变化就是 X不变，然后Y都✖️ -1这下方向对了，差的就是偏移量。 x轴和Y轴差的偏移量都是画布的一半宽度和高度。 这样就实现了，到屏幕坐标的转换了。")]),t._v(" "),s("h1",{attrs:{id:"svg和canvas"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#svg和canvas"}},[t._v("#")]),t._v(" svg和canvas")]),t._v(" "),s("p",[t._v("SVG和canvas的学习我还是推荐Mdn, 大家去认真从头撸一遍，然后再谈进阶，再去如何优化， 你连基本的api都不熟悉和谈进阶对吧。")]),t._v(" "),s("ol",[s("li",[s("p",[s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial",target:"_blank",rel:"noopener noreferrer"}},[t._v("svg教程"),s("OutboundLink")],1),t._v("   https://developer.mozilla.org/zh-CN/docs/Web/SVG/Tutorial")])]),t._v(" "),s("li",[s("p",[s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial",target:"_blank",rel:"noopener noreferrer"}},[t._v("canvas教程"),s("OutboundLink")],1),t._v("   https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial")]),t._v(" "),s("p",[t._v("跟着后面学一遍，手敲一遍，自然就明白其中的奥秘。 下面👇是我用了这么久的小经验，和小tips")])]),t._v(" "),s("li",[s("p",[t._v("svg中的path 中大写字母和小写字母的 区别主要是相对定位和绝对定位的关系。")])]),t._v(" "),s("li",[s("p",[t._v("svg的defs标签 不会出现在画布上，是为了下面的组合使用的")])]),t._v(" "),s("li",[s("p",[t._v("svg的g 和 symbols 都可以实现组合 ，但是symbols 有viewbox 也就是视口的概念")])]),t._v(" "),s("li",[s("p",[t._v("use 复用标签 对应上文定义的id")])]),t._v(" "),s("li",[s("p",[t._v("canvas "),s("strong",[t._v("clearRect（）")]),t._v("  清除画布   由于canvas 每一帧都要进行重绘")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("restore()  save()")]),t._v("  保存当前canvas 的状态 确保不影响 其他绘图元素")])]),t._v(" "),s("li",[s("p",[s("strong",[t._v("isPointinPath（）")]),t._v(" 可以用来点是不是在最后一个绘制的path 中(有坑) ， 判断点是不是在图形内部最后用算法去解决。")])]),t._v(" "),s("li",[s("p",[t._v("beginPath()  和 closePath() 的使用")])]),t._v(" "),s("li",[s("p",[t._v("像素级别的处理 imageData 的使用")])])]),t._v(" "),s("p",[t._v("当你熟悉了这些可以进阶了， 推荐学习")]),t._v(" "),s("h2",{attrs:{id:"进阶学习"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进阶学习"}},[t._v("#")]),t._v(" "),s("strong",[t._v("进阶学习")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://joshondesign.com/p/books/canvasdeepdive/title.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入理解canvas"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("https://joshondesign.com/p/books/canvasdeepdive/title.html")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.cnblogs.com/mopagunda/p/5622911.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Canvas 最佳实践（性能优化）"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("https://www.cnblogs.com/mopagunda/p/5622911.html")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://devnook.github.io/OffscreenCanvasDemo/keep-ui-responsive.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("canvas 离屏渲染"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("https://devnook.github.io/OffscreenCanvasDemo/keep-ui-responsive.html")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.bilibili.com/video/av26151775/",target:"_blank",rel:"noopener noreferrer"}},[t._v("canvas视频学习"),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("https://www.bilibili.com/video/av26151775/")]),t._v(" "),s("h2",{attrs:{id:"推荐书籍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#推荐书籍"}},[t._v("#")]),t._v(" "),s("strong",[t._v("推荐书籍")])]),t._v(" "),s("p",[t._v("《HTML5 Canvas核心技术：图形、动画与游戏开发》")]),t._v(" "),s("p",[t._v("《HTML5 2D游戏编程核心技术》")]),t._v(" "),s("h1",{attrs:{id:"webgl"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webgl"}},[t._v("#")]),t._v(" webgl")]),t._v(" "),s("p",[t._v("1.学习图形学基础")]),t._v(" "),s("p",[t._v("一定一定一定要看闫令琪老师的GAMES101现代计算机图形学。建议1.5倍速，大概一个月内可以掌握。跟着课程，把光栅渲染器和光线追踪的作业都做掉，学了这门课，差不多图形学基础就打牢了。对图形学、游戏、3D引擎、OpenGL、Unity、UE差不多也有了基本的认识。我自己还没有看完，还在学习中。")]),t._v(" "),s("p",[t._v("https://www.bilibili.com/video/BV1X7411F744?from=search&seid=7915905348717479996")]),t._v(" "),s("p",[t._v("2.webgl 网站学习，这是我觉得质量非常不错同时又有点深度的学习网站")]),t._v(" "),s("p",[t._v("https://webglfundamentals.org/webgl/lessons/zh_cn/webgl-fundamentals.html")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("着色器和glsl")])]),t._v(" "),s("li",[t._v("光照和颜色")]),t._v(" "),s("li",[t._v("如何加载外部模型")]),t._v(" "),s("li",[t._v("点线面如何三角化")]),t._v(" "),s("li",[t._v("贴图")])]),t._v(" "),s("h2",{attrs:{id:"书籍推荐"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#书籍推荐"}},[t._v("#")]),t._v(" 书籍推荐：")]),t._v(" "),s("p",[t._v("webgl 编程指南")]),t._v(" "),s("p",[t._v("3D游戏与计算机图形学中的数学方法")]),t._v(" "),s("h5",{attrs:{id:"fundamentals-of-computer-graphics-4th-edition"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fundamentals-of-computer-graphics-4th-edition"}},[t._v("#")]),t._v(" "),s("a",{attrs:{href:"https://bookyage.com/fundamentals-of-computer-graphics-4th-edition/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Fundamentals of Computer Graphics (4th Edition)"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("strong",[t._v("directx 9.0 3d游戏开发编程基础")]),t._v("  这本书强力推荐 虽然是用c++写的 ，但是他把整个渲染流程讲解的很清楚，我反正看了收获很大。这也是我们老大推荐的一本书。")]),t._v(" "),s("h1",{attrs:{id:"框架层面"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#框架层面"}},[t._v("#")]),t._v(" 框架层面")]),t._v(" "),s("h2",{attrs:{id:"three-js"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#three-js"}},[t._v("#")]),t._v(" three.js")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://ztifly.oss-cn-hangzhou.aliyuncs.com/image-20210808004031389.png",alt:"image-20210808004031389"}})]),t._v(" "),s("p",[t._v("Three.js 是最知名的 WebGL 项目，Contributions 人数高达 1313，和 React 是一个量级的，尽管它自身的定位只是渲染引擎，但社区硬是把不少游戏引擎的功能都加上了，比如物理引擎、贴花、动画等，在源码中有大量例子，很适合学习，但不少重要功能，比如 gltf 加载器，都是放在 examples 目录里，让人感觉很不正式。")]),t._v(" "),s("p",[t._v("由于知名度最高，Three.js 最大的优势就是社区强大，搜索问题能找到很多答案，也有非常多开源和商业项目使用")]),t._v(" "),s("p",[t._v("但 Three.js 在版本管理方面很不专业，到现在都还没采用 "),s("a",{attrs:{href:"https://link.zhihu.com/?target=https%3A//semver.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("semver"),s("OutboundLink")],1),t._v(" 版本命名规范，每次发布都是一个叫 rXXX 的版本，我见过不少基于 Three.js 的项目都是固定在某个版本不敢升级了")]),t._v(" "),s("h2",{attrs:{id:"babylonjs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#babylonjs"}},[t._v("#")]),t._v(" babylonjs")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://ztifly.oss-cn-hangzhou.aliyuncs.com/image-20210808000356624.png",alt:"image-20210808000356624"}})]),t._v(" "),s("p",[t._v("最后压轴的是 Babylon，它也是 Sugar 最终采用的 WebGL 引擎，不仅功能强大，代码质量也很高，TypeScript 类型完善，几乎每个函数都有注释。")]),t._v(" "),s("p",[t._v("Babylon 在材质方面功能丰富，除了基础的 PBR，还提供了用于皮肤的次表面渲染 SubSurface、用于车漆的 ClearCoat、用于布料的 Sheen，以及用于光盘之类的各向异性材质 Anisotropy 等等。")]),t._v(" "),s("p",[t._v("Babylon 最后一个亮点是正在开发 WebGPU 版本，而其他引擎都没开始做，所以等 WebGPU 发布后，Babylon 应该是首批支持的，将得到更多关注。")]),t._v(" "),s("h2",{attrs:{id:"antv"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#antv"}},[t._v("#")]),t._v(" AntV")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://ztifly.oss-cn-hangzhou.aliyuncs.com/image-20210808000608074.png",alt:"image-20210808000608074"}})]),t._v(" "),s("p",[t._v("在AntV中，有好几个不同的可视化引擎，事实上，它们是相互隔绝的，彼此独立的。学习的时候需要单独的去学习。ChartCube图表魔方支持在线的生成图表。地图则使用L7地理空间数据可视化。")]),t._v(" "),s("h2",{attrs:{id:"echarts"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#echarts"}},[t._v("#")]),t._v(" echarts")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://ztifly.oss-cn-hangzhou.aliyuncs.com/image-20210808000817240.png",alt:"image-20210808000817240"}})]),t._v(" "),s("p",[t._v('ECharts最初是"Enterprise Charts"（企业图表）的简称，来自百度EFE数据可视化团队，是用JavaScript实现的开源可视化库。ECharts的功能非常强大，对移动端进行了细致的优化，适配微信小程序，支持多种渲染方式和千万数据的前端展现，甚至实现了无障碍访问。底层是用的z-render 这个库去进行封装的。还是很值的学习对的，有点类似于组件的概念，进行可配置的去展示图表。')]),t._v(" "),s("h2",{attrs:{id:"d3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#d3"}},[t._v("#")]),t._v(" d3")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://ztifly.oss-cn-hangzhou.aliyuncs.com/image-20210808001245616.png",alt:"image-20210808001245616"}})]),t._v(" "),s("p",[t._v("D3是指数据驱动文档(Data-Driven Documents)。D3.js是一个JavaScript库，它可以通过数据来操作文档。D3可以通过使用HTML、SVG和CSS把数据鲜活形象地展现出来。D3严格遵循Web标准，因而可以让你的程序轻松兼容现代主流浏览器并避免对特定框架的依赖。同时，它提供了强大的可视化组件，可以让使用者以数据驱动的方式去操作DOM。被称为可视化版的jquery。")]),t._v(" "),s("h1",{attrs:{id:"图形算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#图形算法"}},[t._v("#")]),t._v(" 图形算法")]),t._v(" "),s("p",[t._v("最后讲一下不得不掌握的图形算法， 比如很简答的例子。 判断点是不是在任意多边形内部对吧这就是 涉及到算法。")]),t._v(" "),s("p",[t._v("我大概列举下")]),t._v(" "),s("ol",[s("li",[t._v("判断点是不是在任意闭合polygon中  "),s("strong",[t._v("用射线检测法， 有内部的点，像任意方向发出一天射线计算出交点的个数， 奇数就是内部  偶数就是外部")])]),t._v(" "),s("li",[t._v("判断连续多边形的方向 是顺时针还是逆时针   **求面积的正负 ** "),s("strong",[t._v("求平面的noraml  (慎用)  对于凹多边形是不准的")])]),t._v(" "),s("li",[t._v("二维图形下， 任意图形的相交   推荐两个库   "),s("strong",[t._v("clipper 和turf  洞和外轮廓的概念，自己可以百度了解")])]),t._v(" "),s("li",[t._v("判断一个点 在某个向量的哪一面    "),s("strong",[t._v("上面的三点求方向逆时针还是顺时针")])]),t._v(" "),s("li",[t._v("线段求线段求相交  "),s("strong",[t._v("直线方程求焦点")])]),t._v(" "),s("li",[t._v("求任意两个区域的包含关系   内部 外部 相交")]),t._v(" "),s("li",[t._v("碰撞检测  "),s("strong",[t._v("boundingbox 求交集")])])]),t._v(" "),s("p",[t._v("这里我大概列了一下我工作中用到的一些算法。")]),t._v(" "),s("h3",{attrs:{id:"推荐一些文章"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#推荐一些文章"}},[t._v("#")]),t._v(" 推荐一些文章：")]),t._v(" "),s("h5",{attrs:{id:"谈-求线段交点-的几种算法-js实现-完整版"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#谈-求线段交点-的几种算法-js实现-完整版"}},[t._v("#")]),t._v(" "),s("strong",[t._v('谈"求线段交点"的几种算法(js实现,完整版)')])]),t._v(" "),s("p",[t._v("https://www.cnblogs.com/i-gps/archive/2012/06/19/2554992.html")]),t._v(" "),s("h5",{attrs:{id:"计算几何与图形学有关的几种常用算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#计算几何与图形学有关的几种常用算法"}},[t._v("#")]),t._v(" "),s("strong",[t._v("计算几何与图形学有关的几种常用算法")])]),t._v(" "),s("p",[t._v("https://blog.csdn.net/wilson1068/article/details/44133303")]),t._v(" "),s("h5",{attrs:{id:"点在多边形内算法-判断一个点是否在一个复杂多边形的内部"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#点在多边形内算法-判断一个点是否在一个复杂多边形的内部"}},[t._v("#")]),t._v(" 点在多边形内算法——判断一个点是否在一个复杂多边形的内部")]),t._v(" "),s("p",[t._v("https://blog.csdn.net/hjh2005/article/details/9246967")]),t._v(" "),s("h5",{attrs:{id:"实现多边形的交并差还有偏移"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现多边形的交并差还有偏移"}},[t._v("#")]),t._v(" "),s("strong",[t._v("实现多边形的交并差还有偏移")])]),t._v(" "),s("p",[t._v("http://turfjs.org/")]),t._v(" "),s("h5",{attrs:{id:"clipper库中文文档详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#clipper库中文文档详解"}},[t._v("#")]),t._v(" "),s("strong",[t._v("Clipper库中文文档详解")])]),t._v(" "),s("p",[t._v("https://www.cnblogs.com/zhigu/p/11943118.html")]),t._v(" "),s("h1",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("本篇文章大概就是我的个人理解哈，水平有限，能表达的就这么多。如果有更好的欢迎补充学习和交流，文章有错误的欢迎指正。最后送给大家一张思维导图，对照学习哈。我是热爱图形的Fly，我们下次再见👋啦。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://ztifly.oss-cn-hangzhou.aliyuncs.com/image-20210808003107674.png",alt:"思维导图"}})]),t._v(" "),s("h1",{attrs:{id:"资源获得"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#资源获得"}},[t._v("#")]),t._v(" 资源获得")]),t._v(" "),s("p",[t._v("关注公众号【前端图形】，回复 "),s("strong",[t._v("思维导图")]),t._v("  二字 可以"),s("strong",[t._v("免费")]),t._v("获得高清思维导图 ，以及"),s("strong",[t._v("可视化学习视频")]),t._v(" 加文中部分"),s("strong",[t._v("书籍📚pdf版本")])])])}),[],!1,null,null,null);a.default=_.exports}}]);